// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;


import {Test} from "forge-std/Test.sol";
import {HandlerStatefulFuzzCatches} from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {YeildERC20} from "../../mocks/YeildERC20.sol";
import {MockUSDC} from "../../mocks/MockUSDC.sol";


 contract Handler is Test {
    HandlerStatefulFuzzCatches handlerState;
    MockUSDC mockUSDC;
    YeildERC20 yeildERC20;
    address owner;
    
    
    constructor(HandlerStatefulFuzzCatches _handlerState, MockUSDC _usdc, YeildERC20 _yeild) {
        handlerState = _handlerState;
        mockUSDC = _usdc;
        yeildERC20 = _yeild;
        owner = yeildERC20.owner();
    }


    function depositYeildERC20(uint256 _amount) public {
        uint256 amount = bound(_amount, 0, yeildERC20.balanceOf(owner));
        vm.startPrank(owner);
        yeildERC20.approve(address(handlerState), amount);
        handlerState.depositToken(yeildERC20, amount);
        vm.stopPrank();
    }


    function depositMockUSDC(uint256 _amount) public {
        uint256 amount = bound(_amount, 0, mockUSDC.balanceOf(owner));
        vm.startPrank(owner);
        mockUSDC.approve(address(handlerState), amount);
        handlerState.depositToken(mockUSDC, amount);
        vm.stopPrank();
    }

    function withdrawYeildERC20() public {
        vm.startPrank(owner);
        handlerState.withdrawToken(yeildERC20);
        vm.stopPrank();
    }

    function withdrawMockUSDC() public {
        vm.startPrank(owner);
        handlerState.withdrawToken(mockUSDC);
        vm.stopPrank();
    }
}